@file:Suppress("unused", "UNUSED_PARAMETER", "KDocUnresolvedReference")

package com.jonnyzzz.mplay.agent.runtime

import java.io.File
import java.net.URL

/**
 * This class methods are executed directly from
 * the generated bytecode. This class defines the
 * interface
 */
open class MPlayMethodCallRecorder(
    val recorder: MPlayRecorder,
    val methodName: String,
    val methodDescriptor: String
) {
    fun writeBoolean(b: Boolean) = this
    fun writeChar(i: Char) = this
    fun writeByte(b: Byte) = this
    fun writeShort(s: Short) = this
    fun writeInt(i: Int) = this
    fun writeLong(l: Long) = this
    fun writeFloat(f: Float) = this
    fun writeDouble(d: Double) = this
    fun writeObject(o: Any?) = this

    /**
     * Writes method completed successfully, assuming the
     * method result was send via the last call with a `write*` method.
     *
     * The write must not be called if the method result is [Void]
     */
    fun commitWithResult() {
        println("commitWithResult")
    }

    /**
     * Writes method completed with an exception, sending the
     * exception as the method parameter
     */
    fun commitWithException(exception: Throwable) {
        println("commitWithException")
    }
}

data class MPlayRecorder(
    val recordingClassName: String,
    val configClassName: String,
    val configClasspath: List<URL>,
) {
    init {
        println("MPlayRecorder[$recordingClassName] created")
    }

    /**
     * Used the [InterceptMethodTask.methodName] and [InterceptMethodTask.jvmMethodDescriptor]
     */
    fun onMethodEnter(methodName: String, jvmMethodDescriptor: String) : MPlayMethodCallRecorder {
        println("MPlayRecorder[$recordingClassName] on method: $methodName $jvmMethodDescriptor")
        return MPlayMethodCallRecorder(this, methodName, jvmMethodDescriptor)
    }

    companion object {
        /**
         * This method is executed in bytecode
         */
        @JvmStatic
        fun getInstance(
            recordingClassName: String,
            configClassName: String,
            /**
             * classpath separated with [File.separator]
             */
            configClasspath: String,
        ): MPlayRecorder {
            //we may do caching here if needed
            return MPlayRecorder(
                recordingClassName,
                configClassName,
                configClasspath.split(File.separator).map { File(it).toURI().toURL() })
        }
    }
}
